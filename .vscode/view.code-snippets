{
  "Generate HookConsumer class with import and part": {
      "prefix": "hook_consumer_widget",
      "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:hooks_riverpod/hooks_riverpod.dart';",
      "",
      "class $1 extends HookConsumerWidget {",
      "const $1({super.key});",
      "",
      "@override",
      "Widget build(BuildContext context, WidgetRef ref) {",
      "return Container();",
      "}",
      "}",
      ],
},
  "Print to console": {
    "prefix": "pt",
    "body": [
      "print('$1:${$1}');",
    ],
    "description": "Log output to logger"
  },
  "Print to console with logger": {
    "prefix": "lg",
    "body": [
      "logge$1.d('$2');",
    ],
    "description": "Log output to logger"
  },
  "hookWidget": {
    "prefix": "hook",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:hooks_riverpod/hooks_riverpod.dart';",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends HookConsumerWidget {",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({ super.key });",
      "",
      "  @override",
      "  Widget build(BuildContext context, WidgetRef ref){",
      "    return ${2:Container}(${1});",
      "  }",
      "}"
    ]
  },

  //* freezed snippets

  "Generate freezed class": {
    "prefix": "freezed",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part '$1.freezed.dart';",
      "part '$1.g.dart';",
      "",
      "@freezed",
      "class $2 with _$$2 {",
      "const $2._();",
      "factory $2() = _$2;",
      "",
      "factory ${2}.fromJson(Map<String, dynamic> json) => _$${2}FromJson(json);",
      "}"
    ]
  },

  "Part statement": {
    "prefix": "pts",
    "body": [
      "part '${TM_FILENAME_BASE}.g.dart';",
    ],
    "description": "Creates a filled-in part statement"
  },
  "Part 'Freezed' statement": {
    "prefix": "ptf",
    "body": [
      "part '${TM_FILENAME_BASE}.freezed.dart';",
    ],
    "description": "Creates a filled-in freezed part statement"
  },
  "Freezed Data Class": {
    "prefix": "fdataclass",
    "body": [
      "@freezed",
      "abstract class ${1:DataClass} with _$${1:DataClass}{",
      "  const factory ${1:DataClass}(${2}) = _${1:DataClass};",
      "}"
    ],
    "description": "Freezed Data Class"
  },
  "Freezed Union": {
    "prefix": "funion",
    "body": [
      "@freezed",
      "abstract class ${1:Union} with _$${1:Union}{",
      "  const factory ${1:Union}.${2}(${4}) = ${3};",
      "}"
    ],
    "description": "Freezed Union"
  },
  "Freezed Union Case": {
    "prefix": "funioncase",
    "body": [
      "const factory ${1:Union}.${2}(${4}) = ${3};"
    ],
    "description": "Freezed Union Case"
  },
  "From JSON": {
    "prefix": "fromJson",
    "body": [
      "factory ${1}.fromJson(Map<String, dynamic> json) => _$${1}FromJson(json);"
    ],
    "description": "From JSON"
  },
}